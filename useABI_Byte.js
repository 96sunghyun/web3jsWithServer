// abi와 byteCode를 이용해서 deploy하기

const express = require("express");
const app = express();
// 정보를 받아서 response 해 줄 서버
const port = 8080;
// Contract 관련 함수
const Contract = require("web3-eth-contract");

async function deploySimpleToken() {
  try {
    // abi 코드를 저장해준다.
    const abi = [
      {
        inputs: [
          {
            internalType: "string",
            name: "getName",
            type: "string",
          },
          {
            internalType: "string",
            name: "getSymbol",
            type: "string",
          },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            indexed: true,
            internalType: "address",
            name: "spender",
            type: "address",
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "oldAmount",
            type: "uint256",
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        name: "Approval",
        type: "event",
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        name: "Transfer",
        type: "event",
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "spender",
            type: "address",
          },
          {
            indexed: true,
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        name: "Transfer",
        type: "event",
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address",
          },
          {
            internalType: "address",
            name: "",
            type: "address",
          },
        ],
        name: "_allowances",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "_decimals",
        outputs: [
          {
            internalType: "uint8",
            name: "",
            type: "uint8",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "_name",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "_symbol",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "_totalSupply",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "spender",
            type: "address",
          },
        ],
        name: "allowance",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        name: "approve",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool",
          },
        ],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
        ],
        name: "balanceOf",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "decimals",
        outputs: [
          {
            internalType: "uint8",
            name: "",
            type: "uint8",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "name",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "symbol",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "totalSupply",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        name: "transfer",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool",
          },
        ],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        name: "transferFrom",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool",
          },
        ],
        stateMutability: "nonpayable",
        type: "function",
      },
    ];
    // 다음은 byteCode를 저장해준다. 이 경우 geth console을 이용하여 가져와주었다.
    const byteCode =
      "60806040523480156200001157600080fd5b5060405162001ac338038062001ac3833981810160405281019062000037919062000331565b81600390805190602001906200004f929190620000e4565b50806004908051906020019062000068929190620000e4565b506012600560006101000a81548160ff021916908360ff1602179055506a52b7d2dcc80cd2e40000006002819055506002546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050506200041a565b828054620000f290620003e5565b90600052602060002090601f01602090048101928262000116576000855562000162565b82601f106200013157805160ff191683800117855562000162565b8280016001018555821562000162579182015b828111156200016157825182559160200191906001019062000144565b5b50905062000171919062000175565b5090565b5b808211156200019057600081600090555060010162000176565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001fd82620001b2565b810181811067ffffffffffffffff821117156200021f576200021e620001c3565b5b80604052505050565b60006200023462000194565b9050620002428282620001f2565b919050565b600067ffffffffffffffff821115620002655762000264620001c3565b5b6200027082620001b2565b9050602081019050919050565b60005b838110156200029d57808201518184015260208101905062000280565b83811115620002ad576000848401525b50505050565b6000620002ca620002c48462000247565b62000228565b905082815260208101848484011115620002e957620002e8620001ad565b5b620002f68482856200027d565b509392505050565b600082601f830112620003165762000315620001a8565b5b815162000328848260208601620002b3565b91505092915050565b600080604083850312156200034b576200034a6200019e565b5b600083015167ffffffffffffffff8111156200036c576200036b620001a3565b5b6200037a85828601620002fe565b925050602083015167ffffffffffffffff8111156200039e576200039d620001a3565b5b620003ac85828601620002fe565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003fe57607f821691505b602082108103620004145762000413620003b6565b5b50919050565b611699806200042a6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80633eaaf86b1161008c578063a9059cbb11610066578063a9059cbb14610263578063b09f126614610293578063d28d8852146102b1578063dd62ed3e146102cf576100ea565b80633eaaf86b146101f757806370a082311461021557806395d89b4114610245576100ea565b806318160ddd116100c857806318160ddd1461016d57806323b872dd1461018b578063313ce567146101bb57806332424aa3146101d9576100ea565b8063024c2ddd146100ef57806306fdde031461011f578063095ea7b31461013d575b600080fd5b61010960048036038101906101049190610e2f565b6102ff565b6040516101169190610e88565b60405180910390f35b610127610324565b6040516101349190610f3c565b60405180910390f35b61015760048036038101906101529190610f8a565b6103b6565b6040516101649190610fe5565b60405180910390f35b610175610492565b6040516101829190610e88565b60405180910390f35b6101a560048036038101906101a09190611000565b61049c565b6040516101b29190610fe5565b60405180910390f35b6101c361060c565b6040516101d0919061106f565b60405180910390f35b6101e1610623565b6040516101ee919061106f565b60405180910390f35b6101ff610636565b60405161020c9190610e88565b60405180910390f35b61022f600480360381019061022a919061108a565b61063c565b60405161023c9190610e88565b60405180910390f35b61024d610684565b60405161025a9190610f3c565b60405180910390f35b61027d60048036038101906102789190610f8a565b610716565b60405161028a9190610fe5565b60405180910390f35b61029b610792565b6040516102a89190610f3c565b60405180910390f35b6102b9610820565b6040516102c69190610f3c565b60405180910390f35b6102e960048036038101906102e49190610e2f565b6108ae565b6040516102f69190610e88565b60405180910390f35b6001602052816000526040600020602052806000526040600020600091509150505481565b606060038054610333906110e6565b80601f016020809104026020016040519081016040528092919081815260200182805461035f906110e6565b80156103ac5780601f10610381576101008083540402835291602001916103ac565b820191906000526020600020905b81548152906001019060200180831161038f57829003601f168201915b5050505050905090565b600080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561047b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047290611189565b60405180910390fd5b61048733858386610935565b600191505092915050565b6000600254905090565b60006104a9848484610bbf565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f8560405161051d9190610e88565b60405180910390a46000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156105e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e09061121b565b60405180910390fd5b61060085338386856105fb919061126a565b610935565b60019150509392505050565b6000600560009054906101000a900460ff16905090565b600560009054906101000a900460ff1681565b60025481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054610693906110e6565b80601f01602080910402602001604051908101604052809291908181526020018280546106bf906110e6565b801561070c5780601f106106e15761010080835404028352916020019161070c565b820191906000526020600020905b8154815290600101906020018083116106ef57829003601f168201915b5050505050905090565b6000610723338484610bbf565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107809190610e88565b60405180910390a36001905092915050565b6004805461079f906110e6565b80601f01602080910402602001604051908101604052809291908181526020018280546107cb906110e6565b80156108185780601f106107ed57610100808354040283529160200191610818565b820191906000526020600020905b8154815290600101906020018083116107fb57829003601f168201915b505050505081565b6003805461082d906110e6565b80601f0160208091040260200160405190810160405280929190818152602001828054610859906110e6565b80156108a65780601f1061087b576101008083540402835291602001916108a6565b820191906000526020600020905b81548152906001019060200180831161088957829003601f168201915b505050505081565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099b90611310565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0a906113a2565b60405180910390fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548214610ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac89061140e565b60405180910390fd5b80600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a78484604051610bb192919061142e565b60405180910390a350505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c25906114c9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c949061155b565b60405180910390fd5b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610d23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1a906115ed565b60405180910390fd5b8181610d2f919061126a565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610dbf919061160d565b9250508190555050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610dfc82610dd1565b9050919050565b610e0c81610df1565b8114610e1757600080fd5b50565b600081359050610e2981610e03565b92915050565b60008060408385031215610e4657610e45610dcc565b5b6000610e5485828601610e1a565b9250506020610e6585828601610e1a565b9150509250929050565b6000819050919050565b610e8281610e6f565b82525050565b6000602082019050610e9d6000830184610e79565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610edd578082015181840152602081019050610ec2565b83811115610eec576000848401525b50505050565b6000601f19601f8301169050919050565b6000610f0e82610ea3565b610f188185610eae565b9350610f28818560208601610ebf565b610f3181610ef2565b840191505092915050565b60006020820190508181036000830152610f568184610f03565b905092915050565b610f6781610e6f565b8114610f7257600080fd5b50565b600081359050610f8481610f5e565b92915050565b60008060408385031215610fa157610fa0610dcc565b5b6000610faf85828601610e1a565b9250506020610fc085828601610f75565b9150509250929050565b60008115159050919050565b610fdf81610fca565b82525050565b6000602082019050610ffa6000830184610fd6565b92915050565b60008060006060848603121561101957611018610dcc565b5b600061102786828701610e1a565b935050602061103886828701610e1a565b925050604061104986828701610f75565b9150509250925092565b600060ff82169050919050565b61106981611053565b82525050565b60006020820190506110846000830184611060565b92915050565b6000602082840312156110a05761109f610dcc565b5b60006110ae84828501610e1a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110fe57607f821691505b602082108103611111576111106110b7565b5b50919050565b7f45524332303a205472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b6000611173602883610eae565b915061117e82611117565b604082019050919050565b600060208201905081810360008301526111a281611166565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b6000611205602883610eae565b9150611210826111a9565b604082019050919050565b60006020820190508181036000830152611234816111f8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061127582610e6f565b915061128083610e6f565b9250828210156112935761129261123b565b5b828203905092915050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006112fa602483610eae565b91506113058261129e565b604082019050919050565b60006020820190508181036000830152611329816112ed565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061138c602283610eae565b915061139782611330565b604082019050919050565b600060208201905081810360008301526113bb8161137f565b9050919050565b7f45524332303a20696e76616c69642063757272656e74416d6f756e7400000000600082015250565b60006113f8601c83610eae565b9150611403826113c2565b602082019050919050565b60006020820190508181036000830152611427816113eb565b9050919050565b60006040820190506114436000830185610e79565b6114506020830184610e79565b9392505050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006114b3602583610eae565b91506114be82611457565b604082019050919050565b600060208201905081810360008301526114e2816114a6565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611545602383610eae565b9150611550826114e9565b604082019050919050565b6000602082019050818103600083015261157481611538565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006115d7602683610eae565b91506115e28261157b565b604082019050919050565b60006020820190508181036000830152611606816115ca565b9050919050565b600061161882610e6f565b915061162383610e6f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156116585761165761123b565b5b82820190509291505056fea2646970667358221220475cf8e0051283c0b008696df34f57312595d552dcff6f6b795e3ec9d75d08cf64736f6c634300080e0033";

    // Contract의 provider를 지정해준다.
    // provider는 blockChain server주소이다.
    Contract.setProvider("http://127.0.0.1:7545");
    // abi주소를 넣은 contract 객체 생성
    const contract = new Contract(abi);

    // contract 배포 과정
    // .deploy의 data에는 byteCode가 들어간다.
    // arguments에는 constructor 값이 들어간다.
    const receipt = await contract
      .deploy({ data: "0x" + byteCode, arguments: ["ErcSimpleToken", "EST"] })

      // 보내는 주소와 가스비, 사용 가스량 설정
      .send({
        from: "0x26A0C13889A6CF654e5073836a7e4A74496f2752",
        gas: 2000000,
        gasPrice: "1000000000000",
      });
    console.log(receipt);
    return receipt;
  } catch (e) {
    console.log(e);
    return e;
  }
}

app.get("/deploy", (req, res) => {
  deploySimpleToken().then((result) => {
    res.send(result);
  });
});

app.listen(port, () => {
  console.log("Listening...");
});
